import type { BurnNoteData, PatientData, RegionSelection } from './types';
// Age band calculation removed to reduce unused imports
import { DISCHARGE_TEACHING_TOPICS, WHEN_TO_CALL_PROVIDER } from '@/constants/discharge';

/**
 * Formats age for display in notes
 */
function formatAge(ageMonths: number): string {
  if (ageMonths < 12) {
    return `${ageMonths} month${ageMonths !== 1 ? 's' : ''} old`;
  }
  const years = Math.floor(ageMonths / 12);
  const remainingMonths = ageMonths % 12;
  
  if (remainingMonths === 0) {
    return `${years} year${years !== 1 ? 's' : ''} old`;
  }
  return `${years} year${years !== 1 ? 's' : ''}, ${remainingMonths} month${remainingMonths !== 1 ? 's' : ''} old`;
}

/**
 * Formats region selections for note display
 */
function formatBurnDistribution(regions: RegionSelection[]): string {
  if (regions.length === 0) return 'No burns selected';
  
  const significantBurns = regions.filter(r => r.fraction > 0);
  if (significantBurns.length === 0) return 'No significant burns';
  
  const formatted = significantBurns.map(region => {
    const fractionText = region.fraction === 1 ? '' : ` (${Math.round(region.fraction * 100)}%)`;
    return `${region.region}${fractionText}`;
  });
  
  return formatted.join(', ');
}

/**
 * Generates a clinical burn assessment note
 */
export function makeBurnAssessmentNote(data: BurnNoteData): string {
  const { patient, tbsa, fluids, regions, timestamp } = data;
  
  const ageText = formatAge(patient.ageMonths);
  const distributionText = formatBurnDistribution(regions);
  const hoursSinceText = patient.hoursSinceInjury > 0 
    ? ` occurring ${patient.hoursSinceInjury} hours ago`
    : '';
  
  return `
BURN ASSESSMENT NOTE
Generated: ${timestamp.toLocaleString()}

PATIENT: ${ageText}, ${patient.weightKg}kg

MECHANISM: ${patient.mechanism || 'Not specified'}${hoursSinceText}

BURN ASSESSMENT:
- Total Body Surface Area: ${tbsa.tbsaPct}% (${tbsa.ageGroup} age group)
- Distribution: ${distributionText}
- Special areas involved: ${formatSpecialSites(patient.specialSites)}

FLUID RESUSCITATION (Educational):
${fluids.notice ? `⚠️  ${fluids.notice}\n` : ''}
- Parkland Formula: ${fluids.parkland.totalMl}ml total over 24h
- First 8 hours: ${fluids.parkland.first8hMl}ml (${Math.round(fluids.parkland.first8hMl/8)}ml/hr average)
- Next 16 hours: ${fluids.parkland.next16hMl}ml (${Math.round(fluids.parkland.next16hMl/16)}ml/hr average)
- Current rate needed: ${fluids.parkland.rateNowMlPerHr}ml/hr
- Maintenance fluids: ${fluids.maintenance.mlPerHr}ml/hr (${fluids.maintenance.method} method)

{{CLINICAL_ASSESSMENT_PLACEHOLDER}}

PLAN:
□ Verify fluid calculations with protocol
□ Monitor urine output (target: {{UO_TARGET}} ml/hr)
□ Pain management per protocol
□ Wound care per burn team guidelines
□ Consider transfer to burn center if indicated

EDUCATIONAL DISCLAIMER:
This tool provides educational calculations only. All treatments must be verified with institutional protocols and clinical judgment. Not for direct patient care decisions.

Generated by Burn Wizard v0.1.0
`.trim();
}

/**
 * Formats special sites involvement
 */
function formatSpecialSites(specialSites: PatientData['specialSites']): string {
  const involved = Object.entries(specialSites)
    .filter(([_, value]) => value)
    .map(([key]) => key);
  
  return involved.length > 0 ? involved.join(', ') : 'None identified';
}

/**
 * Generates discharge teaching documentation
 */
export function makeDischargeTeachingNote(data: BurnNoteData): string {
  const { patient, tbsa, timestamp } = data;
  
  const ageText = formatAge(patient.ageMonths);
  
  let teachingContent = '';
  Object.entries(DISCHARGE_TEACHING_TOPICS).forEach(([_key, topic]) => {
    teachingContent += `\n${topic.title.toUpperCase()}:\n`;
    topic.points.forEach(point => {
      teachingContent += `• ${point}\n`;
    });
  });
  
  return `
BURN DISCHARGE TEACHING DOCUMENTATION
Generated: ${timestamp.toLocaleString()}

PATIENT: ${ageText}, burn injury with ${tbsa.tbsaPct}% TBSA

EDUCATION PROVIDED:${teachingContent}

WHEN TO CONTACT HEALTHCARE PROVIDER:
${WHEN_TO_CALL_PROVIDER.map(item => `• ${item}`).join('\n')}

FOLLOW-UP APPOINTMENTS:
□ Burn clinic: {{FOLLOW_UP_DATE}}
□ Primary care: {{PCP_DATE}}
□ Other: {{OTHER_APPOINTMENTS}}

PATIENT/CAREGIVER UNDERSTANDING:
□ Demonstrated understanding of wound care
□ Verbalized when to contact provider
□ Received written instructions
□ Questions answered

EDUCATIONAL DISCLAIMER:
This educational material supplements but does not replace individualized clinical instruction. Follow your healthcare team's specific guidance.

Generated by Burn Wizard v0.1.0
`.trim();
}

/**
 * Generates a procedure note template for burn care
 */
export function makeBurnProcedureNote(data: BurnNoteData): string {
  const { patient, tbsa, timestamp } = data;
  
  return `
BURN CARE PROCEDURE NOTE
Generated: ${timestamp.toLocaleString()}

PATIENT: ${formatAge(patient.ageMonths)}, ${patient.weightKg}kg

INDICATION: Burn wound care for ${tbsa.tbsaPct}% TBSA burn

PROCEDURE PERFORMED:
□ Wound assessment and documentation
□ Gentle debridement of loose tissue
□ Cleansing with {{CLEANSING_SOLUTION}}
□ Application of {{TOPICAL_AGENT}}
□ Dressing with {{DRESSING_TYPE}}

WOUND ASSESSMENT:
- Appearance: {{WOUND_APPEARANCE}}
- Depth: {{BURN_DEPTH}}
- Drainage: {{DRAINAGE_DESCRIPTION}}
- Surrounding skin: {{SURROUNDING_SKIN}}
- Pain level: {{PAIN_SCORE}}/10

TOLERANCE:
Patient tolerated procedure {{TOLERANCE_DESCRIPTION}}
Pain management: {{PAIN_MANAGEMENT}}

PLAN:
□ Continue current dressing regimen
□ Redress in {{REDRESSING_FREQUENCY}}
□ Monitor for signs of infection
□ Follow-up as scheduled

Clinician: {{CLINICIAN_NAME}}
Date/Time: ${timestamp.toLocaleString()}

Generated by Burn Wizard v0.1.0
`.trim();
}

/**
 * Creates a comprehensive burn summary for handoff
 */
export function makeBurnHandoffNote(data: BurnNoteData): string {
  const { patient, tbsa, fluids, regions, timestamp } = data;
  
  return `
BURN PATIENT HANDOFF SUMMARY
Generated: ${timestamp.toLocaleString()}

PATIENT: ${formatAge(patient.ageMonths)}, ${patient.weightKg}kg

INJURY DETAILS:
- Mechanism: ${patient.mechanism || 'Not specified'}
- Time of injury: ${patient.hoursSinceInjury}h ago
- TBSA: ${tbsa.tbsaPct}% (${tbsa.ageGroup} calculations)
- Distribution: ${formatBurnDistribution(regions)}
- Special concerns: ${formatSpecialSites(patient.specialSites)}

CURRENT FLUID STATUS:
- Phase: ${fluids.parkland.phase === 'first8' ? 'First 8 hours' : 'Second 16 hours'}
- Current rate: ${fluids.parkland.rateNowMlPerHr}ml/hr (resuscitation)
- Maintenance: ${fluids.maintenance.mlPerHr}ml/hr
- Remaining resuscitation: ${fluids.parkland.phase === 'first8' ? fluids.parkland.remainingFirst8hMl : fluids.parkland.remainingNext16hMl}ml

MONITORING PRIORITIES:
□ Urine output trending
□ Fluid balance assessment
□ Pain management effectiveness
□ Wound progression
□ Vital signs stability

PENDING TASKS:
□ {{PENDING_TASKS}}

CONTACT INFORMATION:
Burn Team: {{BURN_TEAM_CONTACT}}
Attending: {{ATTENDING_CONTACT}}

Generated by Burn Wizard v0.1.0
`.trim();
}